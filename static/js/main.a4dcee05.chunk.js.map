{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","addDish","dishId","moment","utcOffset","startOf","hour","minute","state","scheduledDishes","length","push","setState","alert","removeDish","filter","dish","index","indexOf","splice","getAmountOfDishes","id","userAvailableDishes","dishes","console","log","hours","fetch","then","res","json","data","Grid","container","this","map","item","xs","sm","key","_id","Card","style","maxWidth","CardMedia","image","photoUrl","title","name","height","CardContent","Typography","gutterBottom","variant","component","color","shortDescription","CardActions","Button","size","onClick","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"sWAuGeA,E,kDAzFb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAoBRC,QAAU,SAACC,GACT,GAAIC,MAASC,UAAU,SAAWD,MAASC,UAAU,SAASC,QAAQ,OAAOC,KAAK,MAAMC,OAAO,MAC7F,GAAG,EAAKC,MAAMC,gBAAgBC,OAAS,EAAG,CACxC,IAAID,EAAkB,EAAKD,MAAMC,gBACjCA,EAAgBE,KAAKT,GACrB,EAAKU,SAASH,GACdI,MAAM,mCAENA,MAAM,8CAGRA,MAAM,iCAhCS,EAoCnBC,WAAa,SAACZ,GACZ,IAAIO,EAAkB,EAAKD,MAAMC,gBACjC,GAAIA,EAAgBM,QAAO,SAAAC,GAAI,OAAId,IAAWc,KAAO,CACnD,IAAMC,EAAQR,EAAgBS,QAAQhB,GAClCe,GAAS,IACbR,EAAgBU,OAAOF,EAAO,GAC9B,EAAKL,SAASH,MA1CC,EA+CnBW,kBAAoB,SAAClB,GAEnB,OADwB,EAAKM,MAAMC,gBACZM,QAAO,SAAAM,GAAE,OAAIA,IAAOnB,KAAQQ,QA/CnD,EAAKF,MAAQ,CACXc,oBAAqB,EACrBC,OAAQ,GACRd,gBAAiB,IALF,E,gEASE,IAAD,OAClBe,QAAQC,IAAItB,MAASC,UAAU,SAASsB,QAAU,GAElDC,MAAM,uCACDC,MAAM,SAAAC,GAAG,OAAIA,EAAIC,UACjBF,MAAK,SAACG,GACH,EAAKnB,SAAS,CACVW,OAAQQ,S,+BAqCZ,IAAD,OACP,OACE,kBAACC,EAAA,EAAD,CAAMC,WAAS,GACZC,KAAK1B,MAAMe,OAAOY,KAAI,SAAAnB,GAAI,OAC3B,kBAACgB,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGC,IAAKvB,EAAKwB,KAChC,kBAACC,EAAA,EAAD,CAAMC,MAAO,CAACC,SAAU,MACtB,kBAACC,EAAA,EAAD,CACEC,MAAO7B,EAAK8B,SACZC,MAAO/B,EAAKgC,KACZN,MAAO,CAACO,OAAQ,OAElB,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYC,cAAY,EAACC,QAAQ,KAAKC,UAAU,MAC7CtC,EAAKgC,MAER,kBAACG,EAAA,EAAD,CAAYE,QAAQ,QAAQE,MAAM,gBAAgBD,UAAU,KACzDtC,EAAKwC,mBAGV,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAQC,KAAK,QAAQJ,MAAM,UAAUK,QAAS,kBAAM,EAAK9C,WAAWE,EAAKwB,OACvE,kBAAC,IAAD,OAEF,8BAAO,EAAKpB,kBAAkBJ,EAAKwB,MACnC,kBAACkB,EAAA,EAAD,CAAQC,KAAK,QAAQJ,MAAM,UAAUK,QAAS,kBAAM,EAAK3D,QAAQe,EAAKwB,OACpE,kBAAC,IAAD,kB,GAhFAqB,IAAMC,WCAJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB/C,MAAK,SAAAgD,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvD,QAAQuD,MAAMA,EAAMC,c","file":"static/js/main.a4dcee05.chunk.js","sourcesContent":["import React from 'react';\nimport moment from 'moment';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport Add from '@material-ui/icons/Add';\nimport Remove from '@material-ui/icons/Remove';\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = { \n      userAvailableDishes: 3,\n      dishes: [],\n      scheduledDishes: []\n    };\n  }\n\n  componentDidMount() {\n    console.log(moment().utcOffset('-0500').hours() < 7);\n\n    fetch('https://testapi.io/api/sajhu/dishes')\n        .then( res => res.json())\n        .then((data)=> {\n            this.setState({\n                dishes: data\n            });\n        })\n  }  \n\n  addDish = (dishId) => {\n    if (moment().utcOffset('-0500') < moment().utcOffset('-0500').startOf('day').hour('19').minute('15')) {\n      if(this.state.scheduledDishes.length < 3) {\n        let scheduledDishes = this.state.scheduledDishes;\n        scheduledDishes.push(dishId);\n        this.setState(scheduledDishes);\n        alert('Dish scheduled successfuly');\n      } else {\n        alert('You cant schedule more than 3 dishes.')\n      }\n    } else {\n      alert('You cant schedule after 7:15')\n    }\n  }\n\n  removeDish = (dishId) => {\n    let scheduledDishes = this.state.scheduledDishes;\n    if( scheduledDishes.filter(dish => dishId === dish)) {\n      const index = scheduledDishes.indexOf(dishId);\n      if (index > -1) {\n      scheduledDishes.splice(index, 1);\n      this.setState(scheduledDishes);\n    }\n  }\n}\n\n  getAmountOfDishes = (dishId) => {\n    const scheduledDishes = this.state.scheduledDishes;\n    return scheduledDishes.filter(id => id === dishId).length;\n  }\n\n\n  render() {\n    return (\n      <Grid container>\n        {this.state.dishes.map(dish => (\n        <Grid item xs={12} sm={3} key={dish._id}>\n            <Card style={{maxWidth: 300}}>\n              <CardMedia\n                image={dish.photoUrl}\n                title={dish.name}\n                style={{height: 140}}\n              />\n              <CardContent>\n                <Typography gutterBottom variant=\"h5\" component=\"h2\">\n                  {dish.name}\n                </Typography>\n                <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n                  {dish.shortDescription}\n                </Typography>\n              </CardContent>\n              <CardActions>\n                <Button size=\"small\" color=\"primary\" onClick={() => this.removeDish(dish._id)}>\n                  <Remove />\n                </Button>\n                <span>{this.getAmountOfDishes(dish._id)}</span>\n                <Button size=\"small\" color=\"primary\" onClick={() => this.addDish(dish._id)}>\n                  <Add />\n                </Button>\n              </CardActions>\n            </Card>\n          </Grid>\n        ))}\n      </Grid>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}